#include <core/aes.h>

#include <catch2/catch.hpp>
namespace aes {

TEST_CASE("128-bit known key-text ciphers") {
  AES aes = AES();
  static const unsigned char key[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
  static const unsigned char message[] = {0xf3, 0x44, 0x81, 0xec, 0x3c, 0xc6, 0x27, 0xba, 0xcd, 0x5d, 0xc3, 0xfb, 0x08, 0xf2, 0x73, 0xe6};
  static const unsigned char desired_result[] = {0x03, 0x36, 0x76, 0x3e, 0x96, 0x6d, 0x92, 0x59, 0x5a, 0x56, 0x7c, 0xc9, 0xce, 0x53, 0x7f, 0x5e};
  
  unsigned char* result = aes.Encrypt(message, key);
  REQUIRE(result == desired_result);
}

TEST_CASE("128-bit known key-text cipher") {
  AES aes = AES();
  static const unsigned char key[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
  static const unsigned char message[] = {0x97, 0x98, 0xc4, 0x64, 0x0b, 0xad, 0x75, 0xc7, 0xc3, 0x22, 0x7d, 0xb9, 0x10, 0x17, 0x4e, 0x72};
  static const unsigned char desired_result[] = {0xa9, 0xa1, 0x63, 0x1b, 0xf4, 0x99, 0x69, 0x54, 0xeb, 0xc0, 0x93, 0x95, 0x7b, 0x23, 0x45, 0x89};
  
  unsigned char* result = aes.Encrypt(message, key);
  REQUIRE(result == desired_result);
}

TEST_CASE("128-bit known decrypt") {
  AES aes = AES();
  static const unsigned char key[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
  static const unsigned char desired_result[] = {0x97, 0x98, 0xc4, 0x64, 0x0b, 0xad, 0x75, 0xc7, 0xc3, 0x22, 0x7d, 0xb9, 0x10, 0x17, 0x4e, 0x72};
  static const unsigned char message[] = {0xa9, 0xa1, 0x63, 0x1b, 0xf4, 0x99, 0x69, 0x54, 0xeb, 0xc0, 0x93, 0x95, 0x7b, 0x23, 0x45, 0x89};
  
  unsigned char* result = aes.Decrypt(message, key);
  REQUIRE(result == desired_result);
}

TEST_CASE("128-bit known key-text ciphers") {
  AES aes = AES();
  static const unsigned char key[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
  static const unsigned char desired_result[] = {0xf3, 0x44, 0x81, 0xec, 0x3c, 0xc6, 0x27, 0xba, 0xcd, 0x5d, 0xc3, 0xfb, 0x08, 0xf2, 0x73, 0xe6};
  static const unsigned char message[] = {0x03, 0x36, 0x76, 0x3e, 0x96, 0x6d, 0x92, 0x59, 0x5a, 0x56, 0x7c, 0xc9, 0xce, 0x53, 0x7f, 0x5e};
  
  unsigned char* result = aes.Decrypt(message, key);
  REQUIRE(result == desired_result);
}

TEST_CASE("128 bit Key Expansion") {
  AES aes = AES();
  static const unsigned char key[] = {0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c};
  aes.SetKey(key);
  REQUIRE(aes.GetKeyExpansion(5) == {0xa0, 0xfa, 0xfe, 0x17});
  REQUIRE(aes.GetKeyExpansion(6) == {0x88, 0x54, 0x2c, 0xb1});
  REQUIRE(aes.GetKeyExpansion(43) == {0xe1, 0x3f, 0x0c, 0xc8});
}

TEST_CASE("Test Finite Multiplication") {
  REQUIRE(AES::FiniteMultiply(0x53, 0xca) == 0x01);
  REQUIRE(AES::FiniteMultiply(0x65, 0x11) == 0xaf);
}


} //namespace aes