#include <core/aes.h>

#include <catch2/catch.hpp>
#include <iostream>

namespace aes {


size_t decrypt_block_memory_size = 16 * sizeof(unsigned char);

TEST_CASE("128-bit Block Decryption") {
  AES aes = AES(128);
  SECTION("Test1") {
    unsigned char desired_message[] =
        {0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
         0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff};
    unsigned char key[] =
        {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
         0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
    unsigned char message[] =
        {0x69, 0xc4, 0xe0, 0xd8, 0x6a, 0x7b, 0x04, 0x30,
         0xd8, 0xcd, 0xb7, 0x80, 0x70, 0xb4, 0xc5, 0x5a};
    unsigned char result_location[16];
    aes.Decrypt(message, result_location, key);

    REQUIRE(0 == memcmp(desired_message, result_location, decrypt_block_memory_size));
  }
  

  SECTION("Test2") {
    unsigned char key[] =
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    unsigned char desired_result[] =
        {0xf3, 0x44, 0x81, 0xec, 0x3c, 0xc6, 0x27, 0xba,
         0xcd, 0x5d, 0xc3, 0xfb, 0x08, 0xf2, 0x73, 0xe6};
    unsigned char message[] =
        {0x03, 0x36, 0x76, 0x3e, 0x96, 0x6d, 0x92, 0x59,
         0x5a, 0x56, 0x7c, 0xc9, 0xce, 0x53, 0x7f, 0x5e};
    unsigned char result_location[16];
    aes.Decrypt(message, result_location, key);

    REQUIRE(0 == memcmp(desired_result, result_location, decrypt_block_memory_size));
  }

  SECTION("Test3") {
    unsigned char key[] =
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    unsigned char desired_result[] =
        {0x97, 0x98, 0xc4, 0x64, 0x0b, 0xad, 0x75, 0xc7,
         0xc3, 0x22, 0x7d, 0xb9, 0x10, 0x17, 0x4e, 0x72};
    unsigned char message[] =
        {0xa9, 0xa1, 0x63, 0x1b, 0xf4, 0x99, 0x69, 0x54,
         0xeb, 0xc0, 0x93, 0x95, 0x7b, 0x23, 0x45, 0x89};
    unsigned char result_location[16];
    aes.Decrypt(message, result_location, key);

    REQUIRE(0 == memcmp(desired_result, result_location, decrypt_block_memory_size));
  }
}

TEST_CASE("192-bit Block Decryption") {
  AES aes = AES(192);
  SECTION("Test1") {
    unsigned char desired_result[] =
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    unsigned char key[] =
        {0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    unsigned char message[] =
        {0xde, 0x88, 0x5d, 0xc8, 0x7f, 0x5a, 0x92, 0x59,
         0x40, 0x82, 0xd0, 0x2c, 0xc1, 0xe1, 0xb4, 0x2c};
    unsigned char result_location[16];
    aes.Decrypt(message, result_location, key);

    REQUIRE(0 == memcmp(desired_result, result_location, decrypt_block_memory_size));
  }

  SECTION("Test2") {
    unsigned char desired_result[] =
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    unsigned char key[] =
        {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
         0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    unsigned char message[] =
        {0xcf, 0x3f, 0x25, 0x76, 0xe2, 0xaf, 0xed, 0xc7,
         0x4b, 0xb1, 0xca, 0x7e, 0xee, 0xc1, 0xc0, 0xe7};
    unsigned char result_location[16];
    aes.Decrypt(message, result_location, key);

    REQUIRE(0 == memcmp(desired_result, result_location, decrypt_block_memory_size));
  }

  SECTION("Test3") {
    unsigned char desired_result[] =
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    unsigned char key[] =
        {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
         0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
         0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};
    unsigned char message[] =
        {0xdd, 0x8a, 0x49, 0x35, 0x14, 0x23, 0x1c, 0xbf,
         0x56, 0xec, 0xce, 0xe4, 0xc4, 0x08, 0x89, 0xfb};
    unsigned char result_location[16];
    aes.Decrypt(message, result_location, key);

    REQUIRE(0 == memcmp(desired_result, result_location, decrypt_block_memory_size));
  }
}

TEST_CASE("256-bit Block Decryption") {
  AES aes = AES(256);
  SECTION("Test1") {
    unsigned char desired_result[] =
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    unsigned char key[] =
        {0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    unsigned char message[] =
        {0xe3, 0x5a, 0x6d, 0xcb, 0x19, 0xb2, 0x01, 0xa0,
         0x1e, 0xbc, 0xfa, 0x8a, 0xa2, 0x2b, 0x57, 0x59};
    unsigned char result_location[16];
    aes.Decrypt(message, result_location, key);

    REQUIRE(0 == memcmp(desired_result, result_location, decrypt_block_memory_size));
  }

  SECTION("Test2") {
    unsigned char desired_result[] =
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    unsigned char key[] =
        {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
         0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    unsigned char message[] =
        {0x68, 0x25, 0xa3, 0x47, 0xac, 0x47, 0x9d, 0x4f,
         0x9d, 0x95, 0xc5, 0xcb, 0x8d, 0x3f, 0xd7, 0xe9};
    unsigned char result_location[16];
    aes.Decrypt(message, result_location, key);

    REQUIRE(0 == memcmp(desired_result, result_location, decrypt_block_memory_size));
  }

  SECTION("Test3") {
    unsigned char desired_result[] =
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    unsigned char key[] =
        {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
         0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
         0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
         0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};
    unsigned char message[] =
        {0x4b, 0xf8, 0x5f, 0x1b, 0x5d, 0x54, 0xad, 0xbc,
         0x30, 0x7b, 0x0a, 0x04, 0x83, 0x89, 0xad, 0xcb};
    unsigned char result_location[16];
    aes.Decrypt(message, result_location, key);

    REQUIRE(0 == memcmp(desired_result, result_location, decrypt_block_memory_size));
  }
}

} //namespace aes