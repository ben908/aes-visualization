#include <core/aes.h>

#include <catch2/catch.hpp>
#include <iostream>

namespace aes {


size_t decrypt_block_memory_size = 16 * sizeof(unsigned char);

TEST_CASE("128-bit known decrypt") {
  AES aes = AES(128);
  unsigned char key[] =
      {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
  unsigned char desired_result[] =
      {0x97, 0x98, 0xc4, 0x64, 0x0b, 0xad, 0x75, 0xc7, 0xc3, 0x22, 0x7d, 0xb9, 0x10, 0x17, 0x4e, 0x72};
  unsigned char message[] =
      {0xa9, 0xa1, 0x63, 0x1b, 0xf4, 0x99, 0x69, 0x54, 0xeb, 0xc0, 0x93, 0x95, 0x7b, 0x23, 0x45, 0x89};
  unsigned char result_location[16];
  aes.Decrypt(message, result_location, key);

  REQUIRE(0 == memcmp(desired_result, result_location, decrypt_block_memory_size));
}

TEST_CASE("128-bit known decrypt2") {
  AES aes = AES(128);
  unsigned char key[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
  unsigned char desired_result[] = {0xf3, 0x44, 0x81, 0xec, 0x3c, 0xc6, 0x27, 0xba, 0xcd, 0x5d, 0xc3, 0xfb, 0x08, 0xf2, 0x73, 0xe6};
  unsigned char message[] = {0x03, 0x36, 0x76, 0x3e, 0x96, 0x6d, 0x92, 0x59, 0x5a, 0x56, 0x7c, 0xc9, 0xce, 0x53, 0x7f, 0x5e};

//  unsigned char* result = aes.Decrypt(message, key);
//  REQUIRE(result == desired_result);
}

} //namespace aes